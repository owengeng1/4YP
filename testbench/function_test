import numpy as np
import random
import cmath
import time
import matplotlib.pyplot as plt
import json
from math_operations import *
from matplotlib import cm
from scipy.optimize import fsolve


def project_onto_f(p):
    x0 = p[0]
    y0 = p[1]
    def equation(x):
        return x0 - x + 2 * x * (y0 - x**2)
    
    x_guess = x0
    x_proj = fsolve(equation, x_guess)[0]
    y_proj = x_proj ** 2

    return [x_proj, y_proj]

def project_onto_g(p):
    x0 = p[0]
    y0 = p[1]
    
    k = -1-np.sqrt(2)
    y = k*(x0-(1+(1/k)))

    if y < y0:
        x_new = (y0 + 2 + x0)/2
        y_new = x_new - 2
    else:
        x_new = x0
        y_new = -1

    return [x_new, y_new]

converged = False
p = [2,0]
iteration = 0
while converged == False:
    p_temp = p
    p = project_onto_f(p)
    print(f"Iteration {iteration} onto f: {p}")
    p = project_onto_g(p)
    print(f"Iteration {iteration} onto g: {p}")

    condition = np.abs(np.sum(np.subtract(p,p_temp)))
    print(condition)
    if condition < 0.000001:
        converged =True
    iteration = iteration + 1


    